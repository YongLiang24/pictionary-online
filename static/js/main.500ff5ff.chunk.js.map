{"version":3,"sources":["components/AnswerForm.js","components/GuessForm.js","components/HomePage.js","components/Canvas.js","App.js","serviceWorker.js","index.js"],"names":["AnswerForm","props","react_default","a","createElement","onSubmit","handleForm","name","type","required","value","GuessForm","HomePage","className","react_router_dom","to","HEADERS","Content-Type","Accept","Canvas","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","intervalCanvasDraw","fetch","then","resp","json","i","currXArray","length","state","ctx","beginPath","moveTo","prevXArray","prevYArray","lineTo","currYArray","strokeStyle","x","lineWidth","y","stroke","closePath","handleMouseMoves","event","action","persist","findxy","sendDrawData","movement","currentGameId","gameId","method","headers","body","JSON","stringify","mouseAction","e","setState","prevX","currX","prevY","currY","clientX","canvas","offsetLeft","clientY","offsetTop","flag","dot_flag","fillStyle","fillRect","draw","slice","push","handleClear","isClear","console","log","setTimeout","window","location","reload","canvasRef","React","createRef","drawingFlag","width","height","emptyArray","_this2","current","getContext","setInterval","_this3","isDrawing","react","ref","onMouseMove","onMouseDown","onMouseUp","onMouseOut","onClick","Component","App","basename","react_router","exact","path","render","components_HomePage","components_Canvas","components_AnswerForm","components_GuessForm","Boolean","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.500ff5ff.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\n\nconst AnswerForm = (props) =>{\n    return(\n      <div>\n        <form onSubmit={props.handleForm} name='answer'>\n          <label>Your Answer:\n            <input type='text' name='answer'  required/>\n          </label>\n          <input type='submit' value='Send' />\n        </form>\n      </div>\n    )\n}\nexport default AnswerForm\n","import React, { Component, Fragment } from 'react';\n\nconst GuessForm = (props) => {\n\n  return (\n    <div>\n      <form onSubmit={props.handleForm} name=\"guess\">\n        <label>Send Guess:\n          <input type='text' name='guess' required />\n        </label>\n        <input type='submit' value='Submit' />\n      </form>\n    </div>\n  )\n}\nexport default GuessForm\n","import React, { Component, Fragment } from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nconst HomePage = (props) => {\n\n  return (\n    <div>\n      <div className='homeCard'>\n        <h4>Play as Guess</h4>\n        <Link to=\"/guess\">Guess</Link>\n      </div>\n      <div className='homeCard'>\n        <h4>Play as Draw</h4>\n        <Link to=\"/draw\">Draw</Link>\n      </div>\n    </div>\n  )\n}\nexport default HomePage\n","import React, { Component, Fragment } from 'react';\n\nconst HEADERS = {'Content-Type': 'application/json', Accept: 'application/json'}\nclass Canvas extends React.Component {\n  constructor (props) {\n    super(props);\n    this.canvasRef = React.createRef()\n    this.state = {\n      canvas: false,\n      ctx: false,\n      drawingFlag: false,\n      prevX: 0,\n      currX: 0,\n      prevY: 0,\n      currY: 0,\n      prevXArray: [],\n      prevYArray: [],\n      currXArray: [],\n      currYArray: [],\n      dot_flag: false,\n      x: 'black',\n      y: 2,\n      width: 400, // make this a prop\n      height: 400, // make this a prop\n      emptyArray : []\n    }\n  }\n\n  componentDidMount() {\n    // getting ref to canvas html element w React ref, update state\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d')\n\n    // set canvas width / height using hard-coded state\n    canvas.width = this.state.width;\n    canvas.height = this.state.height;\n\n    this.setState(\n      {canvas, ctx},\n      // test data to fill the canvas w a rectangle\n      () => {\n        this.state.ctx.fillStyle = 'lightgray';\n        this.state.ctx.fillRect(20, 20, this.state.canvas.width, this.state.canvas.height)}\n    )\n     setInterval(this.intervalCanvasDraw, 4000)\n\n     const movement = {\n       prevX: 1,\n       isClear: \"true\"\n     }\n     fetch('http://pictionaries.herokuapp.com/canvas/1', {\n       method: 'PATCH',\n       headers: HEADERS,\n       body: JSON.stringify(movement)\n     })\n     .then(resp => resp.json())\n     .then(json=>{\n       console.log('change currentGameId', json)\n     })\n\n  }\n\n  intervalCanvasDraw = () =>{\n    fetch('http://pictionaries.herokuapp.com/canvas')\n    .then(resp => resp.json())\n    .then(json =>{\n      // console.log('the returned movement',json[0])\n        for(let i=0; i < json[0].currXArray.length; i++) {\n          this.state.ctx.beginPath();\n          this.state.ctx.moveTo(json[0].prevXArray[i], json[0].prevYArray[i]);\n          this.state.ctx.lineTo(json[0].currXArray[i], json[0].currYArray[i]);\n          this.state.ctx.strokeStyle = this.state.x;\n          this.state.ctx.lineWidth = this.state.y;\n          this.state.ctx.stroke();\n          this.state.ctx.closePath();\n        }\n    })\n  }\n\n  handleMouseMoves = (event, action) => {\n    event.persist()\n    this.findxy(action, event)\n  }\n\n  sendDrawData = () => {\n    const movement = {\n      currentGameId: this.props.gameId,\n      prevXArray: this.state.prevXArray,\n      prevYArray: this.state.prevYArray,\n      currXArray: this.state.currXArray,\n      currYArray: this.state.currYArray,\n    }\n\n    fetch('http://pictionaries.herokuapp.com/canvas/1', {\n      method: 'PATCH',\n      headers: HEADERS,\n      body: JSON.stringify(movement)\n    })\n  }\n\n  findxy = (mouseAction, e) => {\n    if (mouseAction == 'down') {\n      this.setState(\n        (state) => {return {\n          prevX: state.currX,\n          prevY: state.currY,\n          currX: e.clientX - state.canvas.offsetLeft,\n          currY: e.clientY - state.canvas.offsetTop,\n          flag: true,\n          dot_flag: true\n        }},\n        () => {\n          if (this.state.dot_flag) {\n            this.state.ctx.beginPath();\n            this.state.ctx.fillStyle = this.state.x;\n            this.state.ctx.fillRect(this.state.currX, this.state.currY, 2, 2);\n            this.state.ctx.closePath();\n            this.setState({dot_flag: false})\n          }\n        }\n      )\n    } else if (mouseAction == 'up') {\n        this.setState({flag: false})\n        this.sendDrawData()\n\n    } else if (mouseAction == 'move' && this.state.flag) {\n      this.setState(\n        (state) => {\n          return {\n            prevX: state.currX,\n            prevY: state.currY,\n            currX: e.clientX - state.canvas.offsetLeft,\n            currY: e.clientY - state.canvas.offsetTop,\n          }\n        },\n        () => {\n          this.draw()\n        }\n      )\n    }\n  }\n\n  draw = () => {\n    this.state.ctx.beginPath();\n    this.state.ctx.moveTo(this.state.prevX, this.state.prevY);\n    this.state.ctx.lineTo(this.state.currX, this.state.currY);\n    this.state.ctx.strokeStyle = this.state.x; // update to not mutate state directly\n    this.state.ctx.lineWidth = this.state.y; // update to not mutate state directly\n    this.state.ctx.stroke();\n    this.state.ctx.closePath();\n\n    // store all\n    const prevXArray = this.state.prevXArray.slice()\n    prevXArray.push(this.state.prevX)\n    const prevYArray = this.state.prevYArray.slice()\n    prevYArray.push(this.state.prevY)\n    const currXArray = this.state.currXArray.slice()\n    currXArray.push(this.state.currX)\n    const currYArray = this.state.currYArray.slice()\n    currYArray.push(this.state.currY)\n\n    this.setState({prevXArray, prevYArray, currXArray, currYArray})\n\n  }\n\n\n  handleClear = ()=>{\n    const movement = {\n      prevX: 1,\n      isClear: \"true\"\n    }\n    fetch('http://pictionaries.herokuapp.com/canvas/1', {\n      method: 'PATCH',\n      headers: HEADERS,\n      body: JSON.stringify(movement)\n    })\n    .then(resp => resp.json())\n    .then(json=>{\n      console.log('change currentGameId', json)\n    })\n\n    setTimeout(window.location.reload(), 2000)\n  }\n\n  render() {\n    if (this.props.isDrawing) {\n      return (\n        <Fragment>\n          <canvas\n            ref={this.canvasRef}\n            onMouseMove={(event) => this.handleMouseMoves(event, 'move')}\n            onMouseDown={(event) => this.handleMouseMoves(event, 'down')}\n            onMouseUp={(event) => this.handleMouseMoves(event, 'up')}\n            onMouseOut={(event) => this.handleMouseMoves(event, 'out')}\n          />\n          <button onClick={this.handleClear}>ClearImage</button>\n        </Fragment>\n      )\n    } else {\n      return (\n        <Fragment>\n          {/* <ActionCableConsumer\n            channel={{channel: 'CanvasDrawingsChannel', id:`${this.props.gameId}`}}\n            onReceived={this.handleReceivedDrawing}\n          /> */}\n          <canvas\n            ref={this.canvasRef}\n          />\n        </Fragment>\n      )\n    }\n  }}\n\nexport default Canvas;\n","import React, { Component } from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\n\nimport AnswerForm from './components/AnswerForm';\nimport GuessForm from './components/GuessForm';\nimport HomePage from './components/HomePage';\nimport Canvas from './components/Canvas';\n\nclass App extends Component {\n  state={\n    canvas: ''\n  }\ncomponentDidMount(){\n  fetch(\"http://pictionaries.herokuapp.com/game\")\n  .then(resp =>resp.json())\n  .then(json=>{\n    console.log(json)\n    this.setState({\n      canvas: json[0].name\n    })\n  })\n}\n\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <div>\n          <h2>Pictionary Online</h2>\n          <Link to=\"/\">Home</Link>\n          <hr />\n          <Route exact path=\"/\"\n            render={(props)=>(\n              <div>\n                <HomePage />\n              </div>\n            )}\n          />\n          <Route path=\"/draw\"\n            render={(props)=>(\n              <div>\n                <Canvas isDrawing={true} />\n                <AnswerForm />\n\n              </div>\n            )}\n          />\n\n          <Route path=\"/guess\"\n            render={(props)=>(\n              <div>\n                <Canvas isDrawing={false} />\n                <GuessForm />\n              </div>\n            )}\n          />\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}