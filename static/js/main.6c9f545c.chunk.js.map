{"version":3,"sources":["components/AnswerForm.js","components/GuessForm.js","App.js","serviceWorker.js","index.js"],"names":["AnswerForm","props","react_default","a","createElement","onSubmit","handleForm","name","type","required","value","GuessForm","App","state","canvas","_this2","this","fetch","then","resp","json","console","log","setState","react_router_dom","basename","to","react_router","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4PAceA,EAZI,SAACC,GAChB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,WAAYC,KAAK,UACrCL,EAAAC,EAAAC,cAAA,4BACEF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOD,KAAK,SAAUE,UAAQ,KAE5CP,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASE,MAAM,YCMtBC,EAbG,SAACV,GAEjB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,WAAYC,KAAK,SACrCL,EAAAC,EAAAC,cAAA,0BACEF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOD,KAAK,QAAQE,UAAQ,KAE1CP,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASE,MAAM,cC6BpBE,6MAjCbC,MAAM,CACJC,OAAQ,uFAEO,IAAAC,EAAAC,KACjBC,MAAM,0CACLC,KAAK,SAAAC,GAAI,OAAGA,EAAKC,SACjBF,KAAK,SAAAE,GACJC,QAAQC,IAAIF,GACZL,EAAKQ,SAAS,CACZT,OAAQM,EAAK,GAAGb,0CAMlB,OACEL,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,SAAS,KACnBvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAME,GAAG,KAAT,SACJxB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAME,GAAG,UAAT,WAGNxB,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,IACjCE,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWnB,aA3BxBoB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.6c9f545c.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\n\nconst AnswerForm = (props) =>{\n    return(\n      <div>\n        <form onSubmit={props.handleForm} name='answer'>\n          <label>Your Answer:\n            <input type='text' name='answer'  required/>\n          </label>\n          <input type='submit' value='Send' />\n        </form>\n      </div>\n    )\n}\nexport default AnswerForm\n","import React, { Component, Fragment } from 'react';\n\nconst GuessForm = (props) => {\n\n  return (\n    <div>\n      <form onSubmit={props.handleForm} name=\"guess\">\n        <label>New Guess:\n          <input type='text' name='guess' required />\n        </label>\n        <input type='submit' value='Submit' />\n      </form>\n    </div>\n  )\n}\nexport default GuessForm\n","import React, { Component } from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport AnswerForm from './components/AnswerForm';\nimport GuessForm from './components/GuessForm';\n\nclass App extends Component {\n  state={\n    canvas: ''\n  }\ncomponentDidMount(){\n  fetch(\"http://pictionaries.herokuapp.com/game\")\n  .then(resp =>resp.json())\n  .then(json=>{\n    console.log(json)\n    this.setState({\n      canvas: json[0].name\n    })\n  })\n}\n\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <div>\n          <ul>\n            <li><Link to=\"/\">Home</Link></li>\n            <li><Link to=\"/about\">About</Link></li>\n          </ul>\n\n          <hr />\n\n          <Route exact path=\"/\" component={AnswerForm} />\n          <Route path=\"/about\" component={GuessForm} />\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}