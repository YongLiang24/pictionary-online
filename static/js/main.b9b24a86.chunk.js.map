{"version":3,"sources":["components/GuessList.js","components/GuessForm.js","components/HomePage.js","components/Canvas.js","App.js","serviceWorker.js","index.js"],"names":["HEADERS","Content-Type","Accept","GuessList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateGuessList","fetch","then","resp","json","setState","guessList","guesses","is_won","alert","handleReject","ev","guessText","target","value","method","headers","body","JSON","stringify","handleWinner","isReject","state","isClear","setInterval","_this2","react_default","a","createElement","className","map","guess","index","key","onClick","Component","GuessForm","updateRejectedList","rejectedList","rejectList","handleGuessForm","preventDefault","console","log","id","onSubmit","type","name","required","reject","style","textDecoration","HomePage","props","react_router_dom","to","Canvas","intervalCanvasDraw","i","currXArray","length","ctx","beginPath","moveTo","prevXArray","prevYArray","lineTo","currYArray","strokeStyle","x","lineWidth","y","stroke","closePath","handleMouseMoves","event","action","persist","findxy","sendDrawData","movement","currentGameId","gameId","mouseAction","e","prevX","currX","prevY","currY","Touch","clientX","canvas","offsetLeft","clientY","offsetTop","flag","dot_flag","fillStyle","fillRect","draw","slice","push","handleClear","setTimeout","window","location","reload","canvasRef","React","createRef","drawingFlag","width","height","emptyArray","current","getContext","_this3","isDrawing","ref","onMouseMove","onMouseDown","onMouseUp","onMouseOut","ontouchstart","ontouchmove","ontouchend","App","basename","react","react_router","exact","path","render","components_HomePage","components_Canvas","components_GuessList","components_GuessForm","Boolean","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9b24a86.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nconst HEADERS = {'Content-Type': 'application/json', Accept: 'application/json'}\n\nclass GuessList extends Component{\n\n  constructor(){\n    super()\n    this.state={\n      guessList: []\n    }\n  }\n\n  componentDidMount(){\n    const isClear = true\n    fetch(\"https://pictionaries.herokuapp.com/game/1\", {\n      method: 'PATCH',\n      headers: HEADERS,\n      body: JSON.stringify({isClear})\n    })\n    setInterval(this.updateGuessList, 3000)\n  }\n\n  updateGuessList = ()=>{\n    fetch(\"https://pictionaries.herokuapp.com/game/1\")\n    .then(resp => resp.json())\n    .then(json =>{\n      this.setState({\n        guessList: json.guesses\n      })\n      if(json.is_won){\n         alert('We have a winner, thank you for playing.')\n       }\n    })\n\n\n  }\n\n  handleReject = (ev)=>{\n    //console.log(\"button value:\", ev.target.value)\n    const guessText = ev.target.value\n    fetch(\"https://pictionaries.herokuapp.com/game/1\", {\n      method: 'PATCH',\n      headers: HEADERS,\n      body: JSON.stringify({guessText})\n    })\n  }\n\n  handleWinner =()=>{\n    const isReject = true\n    fetch(\"https://pictionaries.herokuapp.com/game/1\", {\n      method: 'PATCH',\n      headers: HEADERS,\n      body: JSON.stringify({isReject})\n    })\n  }\n\n  render(){\n    return(\n      <div className=\"canvas\">\n        <h2>Guesses:</h2>\n        <ul>\n          {\n            this.state.guessList.map((guess, index)=>{\n              return <li key={index}><strong>{guess}</strong> {\" \"}\n                <button onClick={this.handleWinner}>Accept</button>\n                {\" \"}\n                <button onClick={this.handleReject} value={guess}>Reject</button>\n              </li>\n          })\n        }\n        </ul>\n      </div>\n    )\n  }\n\n}\nexport default GuessList\n","import React, { Component, Fragment } from 'react';\nconst HEADERS = {'Content-Type': 'application/json', Accept: 'application/json'}\n\nclass GuessForm extends Component{\n  constructor(){\n    super()\n    this.state={\n      rejectedList: []\n    }\n  }\n\ncomponentDidMount(){\n  setInterval(this.updateRejectedList, 3000)\n}\n\nupdateRejectedList = ()=>{\n  fetch(\"https://pictionaries.herokuapp.com/game/1\")\n  .then(resp => resp.json())\n  .then(json =>{\n    this.setState({\n      rejectedList: json.rejectList\n    })\n\n    if(json.is_won){\n       alert('We have a winner, thank you for playing.')\n     }\n  })\n\n}\n\nhandleGuessForm = (ev)=>{\n  ev.preventDefault()\n  console.log(\"ev.name\", ev.target.guess.value)\n  //const guessAction = ev.target.name\n  const guess = ev.target.guess.value\n  fetch(\"https://pictionaries.herokuapp.com/game/1\", {\n    method: 'PATCH',\n    headers: HEADERS,\n    body: JSON.stringify({guess})\n  })\n}\n  render(){\n    return (\n      <div className=\"canvas\">\n        <div id='sendGuessForm'>\n          <form onSubmit={this.handleGuessForm}>\n            <label><strong>Send Guess:</strong>\n              <input type='text' name='guess' required />\n            </label>\n            <input type='submit' value='Submit' />\n          </form>\n        </div>\n        <h3>Wrong Answers:</h3>\n        <ul id='rejectedGuessList'>\n          {\n            this.state.rejectedList.map((reject, index)=>{\n              return <li key={index} style={{textDecoration: 'line-through'}}><strong>{reject}</strong></li>\n            })\n          }\n        </ul>\n\n\n      </div>\n    )\n  }\n\n}\nexport default GuessForm\n","import React, { Component, Fragment } from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nconst HomePage = (props) => {\n\n  return (\n    <div id='playSelect'>\n      <div className='homeCard'>\n        <Link to=\"/guess\">\n          <h4>Play as a Guess Role</h4>\n        </Link>\n      </div>\n      <div className='homeCard'>\n        <Link to=\"/draw\">\n          <h4>Play as a Draw Role</h4>\n        </Link>\n        </div>\n    </div>\n  )\n}\nexport default HomePage\n","import React, { Component, Fragment } from 'react';\n\nconst HEADERS = {'Content-Type': 'application/json', Accept: 'application/json'}\nclass Canvas extends React.Component {\n  constructor (props) {\n    super(props);\n    this.canvasRef = React.createRef()\n    this.state = {\n      canvas: false,\n      ctx: false,\n      drawingFlag: false,\n      prevX: 0,\n      currX: 0,\n      prevY: 0,\n      currY: 0,\n      prevXArray: [],\n      prevYArray: [],\n      currXArray: [],\n      currYArray: [],\n      dot_flag: false,\n      x: 'black',\n      y: 2,\n      width: 350, // make this a prop\n      height: 350, // make this a prop\n      emptyArray : []\n    }\n  }\n\n  componentDidMount() {\n    // getting ref to canvas html element w React ref, update state\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d')\n\n    // set canvas width / height using hard-coded state\n    canvas.width = this.state.width;\n    canvas.height = this.state.height;\n\n    this.setState(\n      {canvas, ctx},\n      // test data to fill the canvas w a rectangle\n      () => {\n        this.state.ctx.fillStyle = 'lightgray';\n        this.state.ctx.fillRect(20, 20, this.state.canvas.width, this.state.canvas.height)}\n    )\n     setInterval(this.intervalCanvasDraw, 2000)\n\n     const movement = {\n       prevX: 1,\n       isClear: \"true\"\n     }\n     fetch('https://pictionaries.herokuapp.com/canvas/1', {\n       method: 'PATCH',\n       headers: HEADERS,\n       body: JSON.stringify(movement)\n     })\n     .then(resp => resp.json())\n     .then(json=>{\n       console.log('change currentGameId', json)\n     })\n\n  }\n\n  intervalCanvasDraw = () =>{\n    fetch('https://pictionaries.herokuapp.com/canvas')\n    .then(resp => resp.json())\n    .then(json =>{\n      // console.log('the returned movement',json[0])\n        for(let i=0; i < json[0].currXArray.length; i++) {\n          this.state.ctx.beginPath();\n          this.state.ctx.moveTo(json[0].prevXArray[i], json[0].prevYArray[i]);\n          this.state.ctx.lineTo(json[0].currXArray[i], json[0].currYArray[i]);\n          this.state.ctx.strokeStyle = this.state.x;\n          this.state.ctx.lineWidth = this.state.y;\n          this.state.ctx.stroke();\n          this.state.ctx.closePath();\n        }\n    })\n  }\n\n  handleMouseMoves = (event, action) => {\n    event.preventDefault()\n    event.persist()\n    this.findxy(action, event)\n  }\n\n  sendDrawData = () => {\n    const movement = {\n      currentGameId: this.props.gameId,\n      prevXArray: this.state.prevXArray,\n      prevYArray: this.state.prevYArray,\n      currXArray: this.state.currXArray,\n      currYArray: this.state.currYArray,\n    }\n\n    fetch('https://pictionaries.herokuapp.com/canvas/1', {\n      method: 'PATCH',\n      headers: HEADERS,\n      body: JSON.stringify(movement)\n    })\n  }\n\n  findxy = (mouseAction, e) => {\n    if (mouseAction == 'down') {\n      this.setState(\n        (state) => {return {\n          prevX: state.currX,\n          prevY: state.currY,\n          currX: e.Touch.clientX - state.canvas.offsetLeft,\n          currY: e.Touch.clientY - state.canvas.offsetTop,\n          flag: true,\n          dot_flag: true\n        }},\n        () => {\n          if (this.state.dot_flag) {\n            this.state.ctx.beginPath();\n            this.state.ctx.fillStyle = this.state.x;\n            this.state.ctx.fillRect(this.state.currX, this.state.currY, 2, 2);\n            this.state.ctx.closePath();\n            this.setState({dot_flag: false})\n          }\n        }\n      )\n    } else if (mouseAction == 'up') {\n        this.setState({flag: false})\n        this.sendDrawData()\n\n    } else if (mouseAction == 'move' && this.state.flag) {\n      this.setState(\n        (state) => {\n          return {\n            prevX: state.currX,\n            prevY: state.currY,\n            currX: e.Touch.clientX - state.canvas.offsetLeft,\n            currY: e.Touch.clientY - state.canvas.offsetTop,\n          }\n        },\n        () => {\n          this.draw()\n        }\n      )\n    }\n  }\n\n  draw = () => {\n    this.state.ctx.beginPath();\n    this.state.ctx.moveTo(this.state.prevX, this.state.prevY);\n    this.state.ctx.lineTo(this.state.currX, this.state.currY);\n    this.state.ctx.strokeStyle = this.state.x; // update to not mutate state directly\n    this.state.ctx.lineWidth = this.state.y; // update to not mutate state directly\n    this.state.ctx.stroke();\n    this.state.ctx.closePath();\n\n    // store all\n    const prevXArray = this.state.prevXArray.slice()\n    prevXArray.push(this.state.prevX)\n    const prevYArray = this.state.prevYArray.slice()\n    prevYArray.push(this.state.prevY)\n    const currXArray = this.state.currXArray.slice()\n    currXArray.push(this.state.currX)\n    const currYArray = this.state.currYArray.slice()\n    currYArray.push(this.state.currY)\n\n    this.setState({prevXArray, prevYArray, currXArray, currYArray})\n\n  }\n\n\n  handleClear = ()=>{\n    const movement = {\n      prevX: 1,\n      isClear: \"true\"\n    }\n    fetch('https://pictionaries.herokuapp.com/canvas/1', {\n      method: 'PATCH',\n      headers: HEADERS,\n      body: JSON.stringify(movement)\n    })\n    .then(resp => resp.json())\n    .then(json=>{\n      console.log('change currentGameId', json)\n    })\n\n    setTimeout(window.location.reload(), 2000)\n  }\n\n  render() {\n\n    if (this.props.isDrawing) {\n      return (\n        <div className=\"canvas\">\n          <canvas\n            ref={this.canvasRef}\n            onMouseMove={(event) => this.handleMouseMoves(event, 'move')}\n            onMouseDown={(event) => this.handleMouseMoves(event, 'down')}\n            onMouseUp={(event) => this.handleMouseMoves(event, 'up')}\n            onMouseOut={(event) => this.handleMouseMoves(event, 'out')}\n\n            ontouchstart={(event) => this.handleMouseMoves(event, 'down')}\n            ontouchmove={(event) => this.handleMouseMoves(event, 'move')}\n            ontouchend={(event) => this.handleMouseMoves(event, 'up')}\n\n          />\n          <button onClick={this.handleClear}>Reset</button>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"canvas\">\n          <canvas\n            ref={this.canvasRef}\n\n          />\n        </div>\n      )\n    }\n  }}\n\nexport default Canvas;\n","import React, { Component, Fragment } from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport GuessList from './components/GuessList';\nimport GuessForm from './components/GuessForm';\nimport HomePage from './components/HomePage';\nimport Canvas from './components/Canvas';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <HashRouter basename=\"/\">\n          <Fragment>\n            <div id='navBar'>\n              <h1>Pictionary Online</h1>\n              <h2 id='home'><Link to=\"/\">Home</Link></h2>\n              <hr />\n            </div>\n            <Route exact path=\"/\"\n              render={(props)=>(\n                <div id='HomePage'>\n                  <HomePage />\n                </div>\n              )}\n            />\n\n            <Route path=\"/draw\"\n              render={(props)=>(\n                <div>\n                  <Canvas isDrawing={true} />\n                  <GuessList />\n\n                </div>\n              )}\n            />\n\n            <Route path=\"/guess\"\n              render={(props)=>(\n                <div>\n                  <Canvas isDrawing={false} />\n                  <GuessForm />\n                </div>\n              )}\n            />\n          </Fragment>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}