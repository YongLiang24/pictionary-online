{"version":3,"sources":["components/GuessList.js","components/GuessForm.js","components/HomePage.js","components/Canvas.js","App.js","serviceWorker.js","index.js"],"names":["HEADERS","Content-Type","Accept","GuessList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateGuessList","fetch","then","resp","json","setState","guessList","guesses","is_won","alert","setTimeout","window","location","reload","handleReject","ev","guessText","target","value","method","headers","body","JSON","stringify","handleWinner","isReject","state","isClear","setInterval","_this2","react_default","a","createElement","map","guess","index","key","onClick","Component","GuessForm","updateRejectedList","rejectedList","rejectList","handleGuessForm","preventDefault","console","log","id","onSubmit","type","name","required","reject","style","textDecoration","HomePage","props","className","react_router_dom","to","Canvas","intervalCanvasDraw","i","currXArray","length","ctx","beginPath","moveTo","prevXArray","prevYArray","lineTo","currYArray","strokeStyle","x","lineWidth","y","stroke","closePath","handleMouseMoves","event","action","persist","findxy","sendDrawData","movement","currentGameId","gameId","mouseAction","e","prevX","currX","prevY","currY","clientX","canvas","offsetLeft","clientY","offsetTop","flag","dot_flag","fillStyle","fillRect","draw","slice","push","handleClear","canvasRef","React","createRef","drawingFlag","width","height","emptyArray","current","getContext","_this3","isDrawing","react","ref","onMouseMove","onMouseDown","onMouseUp","onMouseOut","App","basename","react_router","exact","path","render","components_HomePage","components_Canvas","components_GuessList","components_GuessForm","Boolean","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.26ba53a5.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nconst HEADERS = {'Content-Type': 'application/json', Accept: 'application/json'}\n\nclass GuessList extends Component{\n\n  constructor(){\n    super()\n    this.state={\n      guessList: []\n    }\n  }\n\n  componentDidMount(){\n    const isClear = true\n    fetch(\"https://pictionaries.herokuapp.com/game/1\", {\n      method: 'PATCH',\n      headers: HEADERS,\n      body: JSON.stringify({isClear})\n    })\n    setInterval(this.updateGuessList, 3000)\n  }\n\n  updateGuessList = ()=>{\n    fetch(\"https://pictionaries.herokuapp.com/game/1\")\n    .then(resp => resp.json())\n    .then(json =>{\n      this.setState({\n        guessList: json.guesses\n      })\n      if(json.is_won){\n         alert('We have a winner, thank you for playing.')\n         setTimeout(window.location.reload(), 5000)\n       }\n    })\n\n\n  }\n\n  handleReject = (ev)=>{\n    //console.log(\"button value:\", ev.target.value)\n    const guessText = ev.target.value\n    fetch(\"https://pictionaries.herokuapp.com/game/1\", {\n      method: 'PATCH',\n      headers: HEADERS,\n      body: JSON.stringify({guessText})\n    })\n  }\n\n  handleWinner =()=>{\n    const isReject = true\n    fetch(\"https://pictionaries.herokuapp.com/game/1\", {\n      method: 'PATCH',\n      headers: HEADERS,\n      body: JSON.stringify({isReject})\n    })\n  }\n\n  render(){\n    return(\n      <div>\n        <h2>Guesses:</h2>\n        <ul>\n          {\n            this.state.guessList.map((guess, index)=>{\n              return <li key={index}><strong>{guess}</strong> {\" \"}\n                <button onClick={this.handleWinner}>Accept</button>\n                {\" \"}\n                <button onClick={this.handleReject} value={guess}>Reject</button>\n              </li>\n          })\n        }\n        </ul>\n      </div>\n    )\n  }\n\n}\nexport default GuessList\n","import React, { Component, Fragment } from 'react';\nconst HEADERS = {'Content-Type': 'application/json', Accept: 'application/json'}\n\nclass GuessForm extends Component{\n  constructor(){\n    super()\n    this.state={\n      rejectedList: []\n    }\n  }\n\ncomponentDidMount(){\n  setInterval(this.updateRejectedList, 3000)\n}\n\nupdateRejectedList = ()=>{\n  fetch(\"https://pictionaries.herokuapp.com/game/1\")\n  .then(resp => resp.json())\n  .then(json =>{\n    this.setState({\n      rejectedList: json.rejectList\n    })\n\n    if(json.is_won){\n       alert('We have a winner, thank you for playing.')\n       setTimeout(window.location.reload(), 4000)\n     }\n  })\n\n}\n\nhandleGuessForm = (ev)=>{\n  ev.preventDefault()\n  console.log(\"ev.name\", ev.target.guess.value)\n  //const guessAction = ev.target.name\n  const guess = ev.target.guess.value\n  fetch(\"https://pictionaries.herokuapp.com/game/1\", {\n    method: 'PATCH',\n    headers: HEADERS,\n    body: JSON.stringify({guess})\n  })\n}\n  render(){\n    return (\n      <div>\n        <div id='sendGuessForm'>\n          <form onSubmit={this.handleGuessForm}>\n            <label><strong>Send Guess:</strong>\n              <input type='text' name='guess' required />\n            </label>\n            <input type='submit' value='Submit' />\n          </form>\n        </div>\n        <h3>Wrong Answers:</h3>\n        <ul id='rejectedGuessList'>\n          {\n            this.state.rejectedList.map((reject, index)=>{\n              return <li key={index} style={{textDecoration: 'line-through'}}><strong>{reject}</strong></li>\n            })\n          }\n        </ul>\n\n\n      </div>\n    )\n  }\n\n}\nexport default GuessForm\n","import React, { Component, Fragment } from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nconst HomePage = (props) => {\n\n  return (\n    <div>\n      <div className='homeCard'>\n        <h4>Play as Guess</h4>\n        <Link to=\"/guess\">Guess</Link>\n      </div>\n      <div className='homeCard'>\n        <h4>Play as Draw</h4>\n        <Link to=\"/draw\">Draw</Link>\n      </div>\n    </div>\n  )\n}\nexport default HomePage\n","import React, { Component, Fragment } from 'react';\n\nconst HEADERS = {'Content-Type': 'application/json', Accept: 'application/json'}\nclass Canvas extends React.Component {\n  constructor (props) {\n    super(props);\n    this.canvasRef = React.createRef()\n    this.state = {\n      canvas: false,\n      ctx: false,\n      drawingFlag: false,\n      prevX: 0,\n      currX: 0,\n      prevY: 0,\n      currY: 0,\n      prevXArray: [],\n      prevYArray: [],\n      currXArray: [],\n      currYArray: [],\n      dot_flag: false,\n      x: 'black',\n      y: 2,\n      width: 400, // make this a prop\n      height: 400, // make this a prop\n      emptyArray : []\n    }\n  }\n\n  componentDidMount() {\n    // getting ref to canvas html element w React ref, update state\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d')\n\n    // set canvas width / height using hard-coded state\n    canvas.width = this.state.width;\n    canvas.height = this.state.height;\n\n    this.setState(\n      {canvas, ctx},\n      // test data to fill the canvas w a rectangle\n      () => {\n        this.state.ctx.fillStyle = 'lightgray';\n        this.state.ctx.fillRect(20, 20, this.state.canvas.width, this.state.canvas.height)}\n    )\n     setInterval(this.intervalCanvasDraw, 2000)\n\n     const movement = {\n       prevX: 1,\n       isClear: \"true\"\n     }\n     fetch('https://pictionaries.herokuapp.com/canvas/1', {\n       method: 'PATCH',\n       headers: HEADERS,\n       body: JSON.stringify(movement)\n     })\n     .then(resp => resp.json())\n     .then(json=>{\n       console.log('change currentGameId', json)\n     })\n\n  }\n\n  intervalCanvasDraw = () =>{\n    fetch('https://pictionaries.herokuapp.com/canvas')\n    .then(resp => resp.json())\n    .then(json =>{\n      // console.log('the returned movement',json[0])\n        for(let i=0; i < json[0].currXArray.length; i++) {\n          this.state.ctx.beginPath();\n          this.state.ctx.moveTo(json[0].prevXArray[i], json[0].prevYArray[i]);\n          this.state.ctx.lineTo(json[0].currXArray[i], json[0].currYArray[i]);\n          this.state.ctx.strokeStyle = this.state.x;\n          this.state.ctx.lineWidth = this.state.y;\n          this.state.ctx.stroke();\n          this.state.ctx.closePath();\n        }\n    })\n  }\n\n  handleMouseMoves = (event, action) => {\n    event.persist()\n    this.findxy(action, event)\n  }\n\n  sendDrawData = () => {\n    const movement = {\n      currentGameId: this.props.gameId,\n      prevXArray: this.state.prevXArray,\n      prevYArray: this.state.prevYArray,\n      currXArray: this.state.currXArray,\n      currYArray: this.state.currYArray,\n    }\n\n    fetch('https://pictionaries.herokuapp.com/canvas/1', {\n      method: 'PATCH',\n      headers: HEADERS,\n      body: JSON.stringify(movement)\n    })\n  }\n\n  findxy = (mouseAction, e) => {\n    if (mouseAction == 'down') {\n      this.setState(\n        (state) => {return {\n          prevX: state.currX,\n          prevY: state.currY,\n          currX: e.clientX - state.canvas.offsetLeft,\n          currY: e.clientY - state.canvas.offsetTop,\n          flag: true,\n          dot_flag: true\n        }},\n        () => {\n          if (this.state.dot_flag) {\n            this.state.ctx.beginPath();\n            this.state.ctx.fillStyle = this.state.x;\n            this.state.ctx.fillRect(this.state.currX, this.state.currY, 2, 2);\n            this.state.ctx.closePath();\n            this.setState({dot_flag: false})\n          }\n        }\n      )\n    } else if (mouseAction == 'up') {\n        this.setState({flag: false})\n        this.sendDrawData()\n\n    } else if (mouseAction == 'move' && this.state.flag) {\n      this.setState(\n        (state) => {\n          return {\n            prevX: state.currX,\n            prevY: state.currY,\n            currX: e.clientX - state.canvas.offsetLeft,\n            currY: e.clientY - state.canvas.offsetTop,\n          }\n        },\n        () => {\n          this.draw()\n        }\n      )\n    }\n  }\n\n  draw = () => {\n    this.state.ctx.beginPath();\n    this.state.ctx.moveTo(this.state.prevX, this.state.prevY);\n    this.state.ctx.lineTo(this.state.currX, this.state.currY);\n    this.state.ctx.strokeStyle = this.state.x; // update to not mutate state directly\n    this.state.ctx.lineWidth = this.state.y; // update to not mutate state directly\n    this.state.ctx.stroke();\n    this.state.ctx.closePath();\n\n    // store all\n    const prevXArray = this.state.prevXArray.slice()\n    prevXArray.push(this.state.prevX)\n    const prevYArray = this.state.prevYArray.slice()\n    prevYArray.push(this.state.prevY)\n    const currXArray = this.state.currXArray.slice()\n    currXArray.push(this.state.currX)\n    const currYArray = this.state.currYArray.slice()\n    currYArray.push(this.state.currY)\n\n    this.setState({prevXArray, prevYArray, currXArray, currYArray})\n\n  }\n\n\n  handleClear = ()=>{\n    const movement = {\n      prevX: 1,\n      isClear: \"true\"\n    }\n    fetch('https://pictionaries.herokuapp.com/canvas/1', {\n      method: 'PATCH',\n      headers: HEADERS,\n      body: JSON.stringify(movement)\n    })\n    .then(resp => resp.json())\n    .then(json=>{\n      console.log('change currentGameId', json)\n    })\n\n    setTimeout(window.location.reload(), 2000)\n  }\n\n  render() {\n    if (this.props.isDrawing) {\n      return (\n        <Fragment>\n          <canvas\n            ref={this.canvasRef}\n            onMouseMove={(event) => this.handleMouseMoves(event, 'move')}\n            onMouseDown={(event) => this.handleMouseMoves(event, 'down')}\n            onMouseUp={(event) => this.handleMouseMoves(event, 'up')}\n            onMouseOut={(event) => this.handleMouseMoves(event, 'out')}\n          />\n          <button onClick={this.handleClear}>Reset</button>\n        </Fragment>\n      )\n    } else {\n      return (\n        <Fragment>\n          <canvas\n            ref={this.canvasRef}\n          />\n        </Fragment>\n      )\n    }\n  }}\n\nexport default Canvas;\n","import React, { Component } from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\n\nimport GuessList from './components/GuessList';\nimport GuessForm from './components/GuessForm';\nimport HomePage from './components/HomePage';\nimport Canvas from './components/Canvas';\n\nclass App extends Component {\n  state={\n    canvas: ''\n  }\ncomponentDidMount(){\n  fetch(\"https://pictionaries.herokuapp.com/game\")\n  .then(resp =>resp.json())\n  .then(json=>{\n    console.log(json)\n    this.setState({\n      canvas: json[0].name\n    })\n  })\n}\n\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <div>\n          <container>\n            <h2>Pictionary Online</h2>\n            <Link to=\"/\">Home</Link>\n            <hr />\n            <Route exact path=\"/\"\n              render={(props)=>(\n                <div>\n                  <HomePage />\n                </div>\n              )}\n            />\n          </container>\n          <Route path=\"/draw\"\n            render={(props)=>(\n              <div>\n                <Canvas isDrawing={true} />\n                <GuessList />\n\n              </div>\n            )}\n          />\n\n          <Route path=\"/guess\"\n            render={(props)=>(\n              <div>\n                <Canvas isDrawing={false} />\n                <GuessForm />\n              </div>\n            )}\n          />\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}